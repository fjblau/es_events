input { 

# Source the data

jdbc {
    jdbc_driver_library => "mysql-connector-java-5.1.36-bin.jar"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    jdbc_connection_string => "jdbc:mysql://localhost:3306/es_test"
    jdbc_user => "elastic"
    jdbc_password => "elastic"
    schedule => "*/10 * * * * * "
    statement_filepath => "es_testload.sql"
    use_column_value => true
    tracking_column => "lastupdatedate"
    tracking_column_type => "timestamp"
    last_run_metadata_path => ".logstash_jdbc_last_run"
    type => "ES_TESTLOAD"
    add_field => {"pickup_offset" => "pickup_offset"} 
    add_field => {"delivery_offset" => "delivery_offset"} 
  }
}
  
filter {
	
	# get offsets for Pickup Time (hrs)
	translate {
		field => "pickup_offset"
		dictionary_path => "scania.json"
		destination => "pickup_offset_val"
		override => false
		remove_field => "pickup_offset"
	}
	
	# get offsets for Delivery Time (hrs)
	translate {
		field => "delivery_offset"
		dictionary_path => "scania.json"
		destination => "delivery_offset_val"
		override => false
		remove_field => "delivery_offset"
	}
	
	# get Status Code mappings
	translate {
		field => "laststatus"
		dictionary_path => "scania.json"
		destination => "status"
		override => false
	}
	
	# Calculate Timestamp offsets (Ruby)
	ruby {code => 'event.set("offset_pickupdate", LogStash::Timestamp.new(Time.at(event.get("plannedpickup").to_f+(3600*event.get("pickup_offset_val").to_f).to_f)))'	}
	ruby {code => 'event.set("offset_deliverydate", LogStash::Timestamp.new(Time.at(event.get("planneddelivery").to_f+(3600*event.get("delivery_offset_val").to_f).to_f)))'	}
	ruby {code => 'event.set("lastupdatedate", LogStash::Timestamp.new(Time.at(event.get("lastupdatedate").to_f)))'	}
	
	# Rules for Status Patterns
	#
	# Default delivery status to n/a
	mutate { replace => {"delivery_status" =>  "n/a"}}
	
	if ([lastupdatedate] < [offset_pickupdate]) and ([status] == "Picked Up")  {
		mutate { replace => {"pickup_status" =>  "Picked Up-On Time"}}
	} 
	if ([lastupdatedate] > [offset_pickupdate]) and ([status] == "Picked Up")  {
		mutate { replace => {"pickup_status" =>  "Picked Up-Late"}}
	}
	if [lastupdatedate] < [offset_deliverydate] and [status] == "Delivered" {
		mutate { replace => {"delivery_status" =>  "Delivered-On Time"}}
	} 
	if [lastupdatedate] > [offset_deliverydate] and [status] == "Delivered" {
		mutate { replace => {"delivery_status" =>  "Delivered-Late"}}
	}
	if [lastupdatedate] < [offset_pickupdate] and [status] == "Created" {
		mutate { replace => {"pickup_status" =>  "Created-On Time"}}
	} 
	if [lastupdatedate] > [offset_pickupdate] and [status] == "Created" {
		mutate { replace => {"pickup_status" =>  "Created-Late"}}
	}

}
output {
  elasticsearch { hosts => "localhost:9200"
  				  index => "parser" 
       			  manage_template => "true"
       			  document_id => "%{nsenid}"
  				  doc_as_upsert => "true"
        		  action => "update"
  				 }
 }